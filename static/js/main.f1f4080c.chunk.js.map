{"version":3,"sources":["component/Navbar.jsx","component/RepositoryCard.jsx","component/OrganizationCard.jsx","ApiMangement.js","App.js","reportWebVitals.js","index.js"],"names":["MyNavBar","Navbar","bg","Brand","href","src","width","height","className","alt","RepositoryCard","props","data","Card","Body","Title","name","Text","description","Button","html_url","target","variant","OrganizationCard","organization","login","onResponse","response","ok","Error","statusText","json","onError","error","console","App","useState","repositories","setRepositories","organizations","setOrganizations","searchValue","setSearchValue","isFetchingOrganizations","setIsFetchingOrganizations","isFetchingRepositories","setIsFetchingRepositories","Form","onSubmit","event","preventDefault","userName","organizationsURL","fetch","then","catch","getOrganizationsByUserName","repositoriesURL","getRepositoriesByUserName","Row","Col","sm","Label","htmlFor","visuallyHidden","Control","id","placeholder","onChange","value","type","Spinner","animation","map","index","e","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1f4080c.chunk.js","sourcesContent":["import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\n\nconst MyNavBar = () => {\n    return (\n        <Navbar bg=\"light\">\n            <Navbar.Brand href=\"#home\">\n                <img\n                    src=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\"\n                    width=\"40\"\n                    height=\"40\"\n                    className=\"d-inline-block align-items-center\"\n                    alt=\"GitHub logo\"\n                />\n                <img\n                    src=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Logo.png\"\n                    width=\"70\"\n                    height=\"21\"\n                    className=\"d-inline-block align-items-center\"\n                    alt=\"GitHub\"\n                />\n            </Navbar.Brand>\n        </Navbar>\n    );\n};\nexport default MyNavBar;","import React from \"react\";\nimport { Card, Button } from \"react-bootstrap\";\n\nconst RepositoryCard = (props) => {\n    const data = props.data\n    return (\n        <Card className=\"mx-auto\">\n            <Card.Body>\n                <Card.Title>{data.name}</Card.Title>\n                <Card.Text>{data.description}</Card.Text>\n                <Button href={data.html_url} target=\"_blank\" variant=\"secondary\" >Repositorie Page</Button>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default RepositoryCard;\n\n","import React from \"react\";\nimport { Card, Button } from \"react-bootstrap\";\n\nconst OrganizationCard = (props) => {\n    const organization = props.organization;\n\n    return (\n        <Card className=\"mx-auto\">\n            <Card.Body>\n                <Card.Title>{organization.login}</Card.Title>\n                <Card.Text>{organization.description}</Card.Text>\n                <Button href={\"https://github.com/orgs/\" + organization.login} target=\"_blank\" variant=\"secondary\" >Organisation Page</Button>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default OrganizationCard;\n\n","export const getOrganizationsByUserName = (userName) => {\r\n    const organizationsURL = `https://api.github.com/users/${userName}/orgs`;\r\n\r\n    return fetch(organizationsURL)\r\n        .then(onResponse)\r\n        .catch(onError);\r\n\r\n}\r\n\r\nexport const getRepositoriesByUserName = (userName) => {\r\n    const repositoriesURL = `https://api.github.com/users/${userName}/repos`;\r\n\r\n    return fetch(repositoriesURL).then(onResponse)\r\n        .catch(onError);\r\n\r\n}\r\n\r\n\r\n\r\nconst onResponse = (response) => {\r\n    if (!response.ok) {\r\n        throw Error(response.statusText);\r\n    }\r\n    return response.json();\r\n}\r\nconst onError = (error) => {\r\n    console.error('Looks like there was a problem: ', error);\r\n}\r\n\r\n\r\n","import React, { useState } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Form, Col, Row } from \"react-bootstrap\";\nimport MyNavBar from \"./component/Navbar.jsx\";\nimport RepositoryCard from \"./component/RepositoryCard.jsx\";\nimport OrganizationCard from \"./component/OrganizationCard.jsx\";\nimport Spinner from 'react-bootstrap/Spinner'\nimport \"./App.css\"\nimport { getOrganizationsByUserName, getRepositoriesByUserName } from \"./ApiMangement.js\";\n\nfunction App() {\n    const [repositories, setRepositories] = useState([]);\n    const [organizations, setOrganizations] = useState([]);\n    const [searchValue, setSearchValue] = useState('');\n    const [isFetchingOrganizations, setIsFetchingOrganizations] = useState(false);\n    const [isFetchingRepositories, setIsFetchingRepositories] = useState(false);\n\n\n    const handleChange = (event) => {\n        setSearchValue(event.target.value);\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        setIsFetchingOrganizations(true);\n        getOrganizationsByUserName(searchValue).then((organizations) => {\n                setIsFetchingOrganizations(false);\n                setOrganizations(organizations);\n        });\n\n        setIsFetchingRepositories(true);\n        getRepositoriesByUserName(searchValue).then((repositories) => {\n            setIsFetchingRepositories(false);\n            setRepositories(repositories);\n        });\n    };\n\n    const printOrganizations = () => {\n        return organizations.map((organization, index) => {\n            return <OrganizationCard key={index} organization={organization} />\n        })\n    }\n\n    const printRepositories = () => {\n        return repositories.map((e, index) => {\n            return <RepositoryCard key={index} data={e} />\n        })\n    }\n\n    return (\n        <div className=\"App container\">\n            <MyNavBar />\n            <div className=\"input\">\n                <Form onSubmit={handleSubmit}>\n                    <Row className=\"justify-content-center mt-5 mb-5\">\n                        <Col sm={2}>\n                            <Form.Label\n                                htmlFor=\"inlineFormInputName\"\n                                visuallyHidden>\n                                Username\n                            </Form.Label>\n                            <Form.Control\n                                id=\"input\"\n                                placeholder=\"username\"\n                                onChange={handleChange}\n                            />\n                        </Col>\n                        <Col sm={1}>\n                            <Button type=\"submit\">Search</Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </div>\n\n            <div className=\"row\">\n                <div className=\"col scroll\">\n                    <div className=\"title\">\n                        <h2>Organisations</h2>\n                    </div>\n\n                    {isFetchingOrganizations ?\n                        <Spinner animation=\"border\" /> :\n                        <div className=\"repositories\">\n                            {printOrganizations()}\n                        </div>\n                    }\n\n                </div>\n                <div className=\"col\">\n                    <div className=\"title\">\n                        <h2>Repositories</h2>\n                    </div>\n\n                    {isFetchingRepositories ? <Spinner animation=\"border\" /> :\n                        <div className=\"repositories\">\n                            {printRepositories()}\n                        </div>\n                    }\n\n                </div>\n            </div>\n        </div >\n\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}