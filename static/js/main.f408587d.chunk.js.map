{"version":3,"sources":["component/Header.jsx","component/RepositoryCard.jsx","component/OrganizationCard.jsx","ApiMangement.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Nav","Item","src","width","height","className","alt","RepositoryCard","props","repositorie","Card","Body","Title","name","Text","description","Button","href","html_url","target","variant","OrganizationCard","organization","login","onResponse","response","ok","Error","status","json","onError","error","console","App","useState","repositories","setRepositories","organizations","setOrganizations","searchValue","setSearchValue","isFetchingOrganizations","setIsFetchingOrganizations","isFetchingRepositories","setIsFetchingRepositories","Form","onSubmit","event","preventDefault","trimedSearchValue","trim","userName","organizationsURL","fetch","then","catch","getOrganizationsByUserName","repositoriesURL","getRepositoriesByUserName","Row","Col","sm","Label","htmlFor","visuallyHidden","Control","id","placeholder","onChange","value","type","Spinner","animation","map","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f408587d.chunk.js","sourcesContent":["import React from \"react\";\nimport Nav from 'react-bootstrap/Nav'\n\nconst Header = () => {\n    return (\n        <Nav>\n            <Nav.Item>\n                <img\n                    src=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\"\n                    width=\"50\"\n                    height=\"50\"\n                    className=\"d-inline-block align-items-center ms-4\"\n                    alt=\"GitHub logo\"\n                />\n                <img\n                    src=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Logo.png\"\n                    width=\"70\"\n                    height=\"21\"\n                    className=\"d-inline-block align-items-center\"\n                    alt=\"GitHub\"\n                />\n            </Nav.Item>\n        </Nav>\n    );\n};\nexport default Header;\n\n\n","import React from \"react\";\nimport { Card, Button } from \"react-bootstrap\";\n\nconst RepositoryCard = (props) => {\n    const repositorie = props.repositorie;\n\n    return (\n        <Card className=\"mx-auto mb-4\">\n            <Card.Body>\n                <Card.Title>{repositorie.name}</Card.Title>\n                <Card.Text>{repositorie.description}</Card.Text>\n                <Button href={repositorie.html_url} target=\"_blank\" variant=\"secondary\" >Repositorie Page</Button>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default RepositoryCard;\n\n","import React from \"react\";\nimport { Card, Button } from \"react-bootstrap\";\n\nconst OrganizationCard = (props) => {\n    const organization = props.organization;\n    return (\n        <Card className=\"mx-auto mb-4\">\n            <Card.Body>\n                <Card.Title>{organization.login}</Card.Title>\n                <Card.Text>{organization.description}</Card.Text>\n                <Button href={\"https://github.com/orgs/\" + organization.login} target=\"_blank\" variant=\"secondary\" >Organisation Page</Button>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default OrganizationCard;\n\n","\r\nexport const getOrganizationsByUserName = (userName) => {\r\n    const organizationsURL = `https://api.github.com/users/${userName}/orgs`;\r\n\r\n    return fetch(organizationsURL)\r\n        .then(onResponse)\r\n        .catch(onError);\r\n\r\n}\r\n\r\nexport const getRepositoriesByUserName = (userName) => {\r\n    const repositoriesURL = `https://api.github.com/users/${userName}/repos`;\r\n\r\n    return fetch(repositoriesURL)\r\n        .then(onResponse)\r\n        .catch(onError);\r\n\r\n}\r\n\r\n\r\nconst onResponse = (response) => {\r\n    if (!response.ok) {\r\n        throw Error(response.status);\r\n    }\r\n    return response.json();\r\n}\r\n\r\nconst onError = (error) => {\r\n    //aqui va toaster\r\n    console.error('Looks like there was a problem: ', error);\r\n    \r\n}\r\n\r\n\r\n","import React, { useState } from \"react\";\nimport { Button, Form, Col, Row } from \"react-bootstrap\";\nimport Header from \"./component/Header.jsx\";\nimport RepositoryCard from \"./component/RepositoryCard.jsx\";\nimport OrganizationCard from \"./component/OrganizationCard.jsx\";\nimport Spinner from 'react-bootstrap/Spinner'\nimport \"./App.css\"\nimport { getOrganizationsByUserName, getRepositoriesByUserName } from \"./ApiMangement.js\";\n\n\n\nfunction App() {\n    const [repositories, setRepositories] = useState([]);\n    const [organizations, setOrganizations] = useState([]);\n    const [searchValue, setSearchValue] = useState('');\n    const [isFetchingOrganizations, setIsFetchingOrganizations] = useState(false);\n    const [isFetchingRepositories, setIsFetchingRepositories] = useState(false);\n\n\n    const handleChange = (event) => {\n        setSearchValue(event.target.value);\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const trimedSearchValue = searchValue.trim();\n\n        if (!trimedSearchValue.trim()) {\n            return;\n        }\n\n        setIsFetchingOrganizations(true);\n        getOrganizationsByUserName(trimedSearchValue).then((organizations) => {\n            setIsFetchingOrganizations(false);\n            if (organizations) {\n                setOrganizations(organizations);\n            }\n        })\n            ;\n\n        setIsFetchingRepositories(true);\n        getRepositoriesByUserName(trimedSearchValue).then((repositories) => {\n            setIsFetchingRepositories(false);\n            if (repositories) {\n                setRepositories(repositories);\n            }\n        });\n    };\n\n    const printOrganizations = () => {\n\n        return organizations.map((organization, index) => {\n            return <OrganizationCard key={index} organization={organization} />\n        })\n\n    }\n\n    const printRepositories = () => {\n\n        return repositories.map((repositorie, index) => {\n            return <RepositoryCard key={index} repositorie={repositorie} />\n        })\n\n    }\n\n    return (\n        <div className=\"App\">\n            <header>\n                <Header />\n            </header>\n            <main>\n                \n                <div className=\"container\">\n                                    \n             \n                        <Form onSubmit={handleSubmit}>\n                            <Row className=\"justify-content-sm-center mt-5 mb-5\">\n                                <Col sm={3}>\n                                    <Form.Label\n                                        htmlFor=\"inlineFormInputName\"\n                                        visuallyHidden>\n                                        Username\n                                     </Form.Label>\n                                    <Form.Control\n                                        id=\"input\"\n                                        placeholder=\"username\"\n                                        onChange={handleChange}\n                                    />\n                                </Col>\n                                <Col sm={1} className=\"col-md-auto\">\n                                    <Button type=\"submit\"><i className=\"fas fa-search\"></i> </Button>\n                                </Col>\n                            </Row>\n                        </Form>\n\n                        <Row>\n                            <Col>\n                                <div>\n                                    <h2>Organizations</h2>\n                                </div>\n                                {isFetchingOrganizations ?\n                                    <Spinner animation=\"border\" /> :\n                                    <div className=\"repositories\">\n                                        {printOrganizations()}\n                                    </div>\n                                }\n                            </Col>\n                            <Col>\n                                <div>\n                                    <h2>Repositories</h2>\n                                </div>\n\n                                {isFetchingRepositories ? <Spinner animation=\"border\" /> :\n                                    <div className=\"repositories\">\n                                        {printRepositories()}\n                                    </div>\n                                }\n                            </Col>\n                        </Row>\n                    </div>\n            </main>\n        </div >\n\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\"\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}